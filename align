#!/usr/bin/env python
import optparse, subprocess
from subprocess import check_output
import operator
import sys, pdb
from collections import defaultdict

def sorte(t):
  return sorted(t.items(), key=operator.itemgetter(1))

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with IMB Modle 1...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
total_e = defaultdict(float)
s_total = defaultdict(float)
t = defaultdict(float)
f_vocab = set()
e_vocab = set()

f_length, e_length = 0,0
for x in range(opts.num_sents):
  sent = [sent for sent in bitext[x]]
  f_vocab.update(set(sent[0]))
  e_vocab.update(set(sent[1]))

#uniform probabilities
for f_i in f_vocab:
  for e_j in e_vocab:
    t[(f_i,e_j)] = 1 / float(len(e_vocab))

sys.stderr.write("Start...")

for _ in range(5):
  for f_i in f_vocab:
    for e_j in e_vocab:
      fe_count[(f_i,e_j)] = 0
  for e_j in e_vocab:
    total_e[e_j] = 0

  
  for (n, (f, e)) in enumerate(bitext):
    #normalization
    for f_i in f:
      s_total[f_i] = 0
      for e_j in e:
        s_total[f_i] += t[(f_i,e_j)]
    #collect counts
    for f_i in f:
      for e_j in e:
        fe_count[(f_i, e_j)] += t[(f_i, e_j)] / float(s_total[f_i])
        total_e[e_j] += t[(f_i, e_j)] / float(s_total[f_i])

  #estimate probabilities
  for e_j in e_vocab:
    for f_i in f_vocab:
        t[(f_i, e_j)] = fe_count[(f_i, e_j)] / total_e[e_j]


for (f, e) in bitext:
    for (i, f_i) in enumerate(f):
        for (j, e_j) in enumerate(e):
            if t[(f_i, e_j)] >= opts.threshold:
                sys.stdout.write("%i-%i " % (i, j))
    sys.stdout.write("\n")






'''
out1 = subprocess.Popen(['wc', '-w', f_data], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
out2 = out1.communicate()[0]
f_length = int(out2.partition(b' ')[0])

out1 = subprocess.Popen(['wc', '-w', e_data], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
out2 = out1.communicate()[0]
e_length = int(out2.partition(b' ')[0])
'''
